import StableRNGs: StableRNG

# create scattered data
npts = 50
xmin = 0.0
xspan = 3/2*π
x = collect(range(xmin, xmin+xspan, length=npts))
rng = StableRNG(655)
x = x + xspan/npts*(rand(rng,npts) .- 0.5)
# select a subset randomly
idx = unique(rand(rng, collect(eachindex(x)), 20))
t = x[unique(idx)]
npts = length(t)
ut = sin.(t)
stdev = 1e-1*maximum(ut)
u = ut + stdev*randn(rng, npts)

@testset "Direct Smoothing" begin
    # data must be ordered if t̂ is not provided
    idx = sortperm(t)
    tₒ = t[idx]
    uₒ = u[idx]
    A = RegularizationSmooth(uₒ,tₒ; alg=:fixed) # fixed with default λ = 1.0
    @test A.û ≈ [0.6456173647252937 0.663974701324226 0.7631218523665086 0.778654700697601 0.7489958320589535 0.7319087707475104 0.6807082599508811 0.6372557895089508 0.5832859790765743 0.5021274805916013 0.3065928203396211 0.1353332321156384 -0.3260000640060584 -0.6557906092739154 -0.9204882447932498]'
    A = RegularizationSmooth(uₒ,tₒ; λ=1e-2, alg=:fixed)
    @test A.û ≈ [0.13721561507236257 0.37522195010854065 0.6381915132332026 0.9213192924163424 0.9618507222074862 1.045908235602358 0.9318129098629748 0.9722718538280697 0.852068077389825 0.644503667916646 0.1764539533082271 0.11319062065109776 -0.5736230941519018 -0.8016735700507418 -1.1194138819643458]'
    A = RegularizationSmooth(uₒ,tₒ) # GCV determines λ
    @test A.λ ≈ 0.12788440382063268
    @test A.û ≈ [0.21974931848164914 0.2973284508009968 0.6908546278415386 0.9300465474303226 0.9741453042418977 0.9767572556868123 0.9432951659303452 0.8889834700087442 0.804842790047182 0.6603217445567791 0.30341652659101737 0.05924456463634589 -0.5239939779242144 -0.8421768233191822 -1.107517099580091]'
end

